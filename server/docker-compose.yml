services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: portfolio-db
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-myapp}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Node.js Application
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: protfolio_app
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      NODE_ENV: ${NODE_ENV:-production}
      DATABASE_URL: ${DATABASE_URL}
      PORT: ${PORT:-3000}
    ports:
      - "${PORT:-3000}:${PORT:-3000}"
    networks:
      - app-network
    volumes:
      - ./prisma:/app/prisma
    command: sh -c "bunx prisma migrate deploy && bunx prisma generate && bun run index.ts"

  # Prisma Studio (optional, for database management)
  prisma-studio:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: prisma-studio
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      DATABASE_URL: ${DATABASE_URL}
    ports:
      - "5555:5555"
    networks:
      - app-network
    volumes:
      - ./prisma:/app/prisma
    command: bunx prisma studio --port 5555 --hostname 0.0.0.0
    profiles:
      - dev

volumes:
  postgres_data:

networks:
  app-network:
    driver: bridge 