services:
  # PostgreSQL Database
  database:
    image: postgres:15-alpine
    container_name: portfolio-db
    environment:
      POSTGRES_DB: portfolio
      POSTGRES_USER: portfolio_user
      POSTGRES_PASSWORD: portfolio_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - portfolio-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U portfolio_user -d portfolio"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend API Server
  backend:
    build:
      context: ./server
      dockerfile: Dockerfile
    container_name: portfolio-backend
    environment:
      NODE_ENV: production
      PORT: 3001
      DATABASE_URL: postgresql://portfolio_user:portfolio_password@database:5432/portfolio
    ports:
      - "3001:3001"
    depends_on:
      database:
        condition: service_healthy
    networks:
      - portfolio-network
    healthcheck:
      test: ["CMD-SHELL", "bun --version"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend Next.js Application
  frontend:
    build:
      context: ./chhuonmakararoth
      dockerfile: Dockerfile
    container_name: portfolio-frontend
    environment:
      NODE_ENV: production
      NEXT_PUBLIC_API_URL: http://localhost:3000
    ports:
      - "3000:3000"
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - portfolio-network
    healthcheck:
      test: ["CMD-SHELL", "bun --version"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis (optional, for caching)
  redis:
    image: redis:7-alpine
    container_name: portfolio-redis
    ports:
      - "6379:6379"
    networks:
      - portfolio-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data:

networks:
  portfolio-network:
    driver: bridge
